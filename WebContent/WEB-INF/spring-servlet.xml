<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"> 
  
    <context:component-scan
        base-package="net.morse.controller" /> 
    
    <!-- Allows serving of static resources even though we map the root path to the Spring Dispatcher (front controller). -->
    <mvc:annotation-driven />
    <mvc:resources mapping="/resources/**" location="/resources/"/>
	
    <bean id="viewResolver"
    class="org.springframework.web.servlet.view.UrlBasedViewResolver"> 
    	<property name="viewClass"> 
	        <value> 
	            org.springframework.web.servlet.view.tiles2.TilesView 
	        </value> 
        </property> 
    </bean> 

    <bean id="tilesConfigurer"
    class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"> 
      <property name="definitions"> 
        <list> 
            <value>/WEB-INF/tiles.xml</value> 
        </list> 
      </property> 
    </bean>
    
    <bean id="themeSource"
    class="org.springframework.ui.context.support.ResourceBundleThemeSource"> 
        <property name="basenamePrefix" value="theme-" /> 
	</bean> 

	<bean id="themeChangeInterceptor"
    	class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"> 
    	<property name="paramName" value="theme" /> 
	</bean> 
	
	<bean id="themeResolver"
    	class="org.springframework.web.servlet.theme.CookieThemeResolver"> 
    	<property name="defaultThemeName" value="default" /> 
	</bean> 
 
	<bean id="handlerMapping"
    	class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"> 
    	<property name="interceptors"> 
	        <list> 
	            <ref bean="themeChangeInterceptor" /> 
	        </list> 
    	</property>
	</bean>

	<!-- Instead of loading a properties file in a regular java way
	     Spring enables us load a properties file upon startup. We do this 
	     by adding th constructor-arg tag which simply tells spring that
	     upon creation of the bean, load the properties file into a 
	     collection. The <util:> tag uses a hashmap -->
   	<bean id="encodeToMorse" class="net.morse.encode.EncodeToMorse"> 
   		<constructor-arg>
	        <util:properties location="classpath:morse.properties"/> 
	    </constructor-arg>
	</bean>

</beans>